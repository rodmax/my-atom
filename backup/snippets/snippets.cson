# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js,.source.stylus,source.c,source.cpp':
    'Multiline comment':
        prefix: '/*'
        body: """
        /*
        * ${1}
        */
        """

'.source.js':
    'require(\'module\')':
        prefix: 'req',
        body: 'require(\'${1:module}\')'

    '\'use strict\';':
        prefix: 'us',
        body: '\'use strict\';'

    'define(...) block':
        prefix: 'define',
        body:
            """
            define(function (require) {
                'use strict';
                $1
            });
            """
    'it(...) block':
        prefix: 'it'
        body:
            """
            it('$1', function () {
                $2
            });
            """
    'describe(...) block':
        prefix: 'des'
        body:
            """
            describe('$1', function () {
                $2
            });
            """
    'function () {}':
        prefix: 'f'
        body: 'function ($1) {$2}'
    'function <name>() {}':
        prefix: 'fun'
        body:
            """
            function ${1:funcName}($2) {
                $3
            }
            """
    '.prototype':
        prefix: 'proto'
        body: 'prototype'
    'x => y(x)':
        prefix: 'af',
        body: '${1:(arguments)} => ${2:statement}'
